install.packages("igraph")
if (!require(igraph)) install.packages('igraph')
if (!require(tcltk)) install.packages('tcltk')
if (!require(rgl)) install.packages('rgl')
if (!require(ape)) install.packages('ape')
demo(package="igraph")
igraphdemo()
install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
if (!require(igraph)) install.packages("igraph")
if (!require(network)) install.packages("network")
if (!require(sna)) install.packages("sna")
if (!require(visNetwork)) install.packages("visNetwork")
if (!require(threejs)) install.packages("threejs")
if (!require(ndtv)) install.packages("ndtv")
if (!require(RColorBrewer)) install.packages("RColorBrewer")
if (!require(png)) install.packages("png")
if (!require(networkD3)) install.packages("networkD3")
if (!require(animation)) install.packages("animation")
if (!require(maps)) install.packages("maps")
if (!require(geosphere)) install.packages("geosphere")
library("RColorBrewer")
library(igraph)
Sys.getenv("R_LIBS_USER")
install.packages("pacman")
p_unlock()
library(pacman)
p_unlock()
devtools::install_github("yutannihilation/mediumr")
install.packages(devtools)
install.packages("devtools")
getwd()
devtools::install_github("yutannihilation/mediumr")
d_raw <- read.csv(file="data/animal_random_merged.csv", header=TRUE, sep=",") # load data
nodes <- data.frame(unique(d_raw$Center)) # create node list of unique labels
nodes <- setNames(nodes, c("Label")) # change colname Label
myvars <- c("Center", "Answer") # vectors to pick
links <- d_raw[myvars] # pick "Center" and "Answer" vectors
links$Type <- rep(c("Directed"), times = length(links$Center)) # add vector "Type" of link
links <- setNames(links, c("From", "To", "Type")) # change col names for graph object
setwd("C:/Users/pablo/Desktop/projects/visualization_semantic_networks/jupyter_notebook/next_triplets")
d_raw <- read.csv(file="data/animal_random_merged.csv", header=TRUE, sep=",") # load data
nodes <- data.frame(unique(d_raw$Center)) # create node list of unique labels
nodes <- setNames(nodes, c("Label")) # change colname Label
myvars <- c("Center", "Answer") # vectors to pick
links <- d_raw[myvars] # pick "Center" and "Answer" vectors
links$Type <- rep(c("Directed"), times = length(links$Center)) # add vector "Type" of link
links <- setNames(links, c("From", "To", "Type")) # change col names for graph object
library(igraph)
library(scales)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T) # new igraph-network object
E(net) # edges
V(net) # vertices
is_weighted(net)
plot(net)
deg <- degree(net.s, mode="all")
deg <- rescale(deg, to = c(5, 15)) # resize node size
V(net.s)$size <- deg
plot(net.s, edge.arrow.size=.1) # reduce arrow size
net.s <- simplify(net, remove.multiple = T, remove.loops = T, edge.attr.comb=c(weight="sum", type="ignore"))
plot(net.s)
deg <- degree(net.s, mode="all")
deg <- rescale(deg, to = c(5, 15)) # resize node size
V(net.s)$size <- deg
plot(net.s, edge.arrow.size=.1) # reduce arrow size
vertex.attributes(net.s)
plot(net.s, edge.arrow.size=.1,vertex.label=NA, layout = layout_with_lgl)
clp <- cluster_walktrap(net.s)
head(clp$membership) #here we can check the community at which each node was assigned
class(clp)
print("number of communities: ")
length(clp) # number of communities
print("Graph's modularity: ")
modularity(clp) # how modular the graph partitioning is
plot(clp, net.s, vertex.label.cex=0.5, edge.arrow.size=0.1,
edge.color="gray85",layout=layout_on_sphere)
plot(clp, net.s, vertex.label.cex=0.5, edge.arrow.size=0.1,
edge.color="gray85")
membership(clp)
prettyColors <- brewer.pal(length(clp), "Spectral") # pick 4 colors from spectral pallete
library("RColorBrewer")
prettyColors <- brewer.pal(length(clp), "Spectral") # pick 4 colors from spectral pallete
communityColors <- prettyColors[membership(clp)] # assign colors to communities
communityColors
edge.weights <- function(community, network, weight.within = 5, weight.between = 1) {
bridges <- crossing(communities = community, graph = network)
weights <- ifelse(test = bridges, yes = weight.between, no = weight.within)
return(weights)
}
# Then transfer the weights to the weight slot in the nodes:
net.graph <- net.s # create copy of original graph
E(net.graph)$weight <- edge.weights(clp, net.graph) # add new weights based on community pertenence
set.seed(28) # set seed for reproducibility
# Let's plot something nicer
par(bg="black") # set background to black
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.8,
vertex.label.color="white", edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= layout.sugiyama)
dendPlot(clp, mode="hclust")
dendPlot(net.graph, mode="hclust")
par(bg="black") # set background to black
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.8,
vertex.label.color="white", edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= layout_fruchterman_reingold)
l = layout.fruchterman.reingold(net.graph) # create a tree like layout
plot(clp, net.s, vertex.label.cex=0.5, edge.arrow.size=0.1, edge.color="gray85", layout = l)
dev.off()
l = layout.fruchterman.reingold(net.graph) # create a tree like layout
plot(clp, net.s, vertex.label.cex=0.5, edge.arrow.size=0.1, edge.color="gray85", layout = l)
l = layout.fruchterman.reingold(net.graph) # create a tree like layout
plot(clp, net.s, vertex.label.cex=0.8, edge.arrow.size=0.1, edge.color="gray85", layout = l)
l1 = layout.spring(net.graph) # create a tree like layout
l1 = layout.fruchterman.reingold.grid(net.graph) # create a tree like layout
l1 = layout.kamada.kawai(net.graph) # create a tree like layout
plot(clp, net.s, vertex.label.cex=0.8, edge.arrow.size=0.1, edge.color="gray85", layout = l1)
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.8,
vertex.label.color="black", edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l1)
edge.weights <- function(community, network, weight.within = 5, weight.between = 10) {
bridges <- crossing(communities = community, graph = network)
weights <- ifelse(test = bridges, yes = weight.between, no = weight.within)
return(weights)
}
# Then transfer the weights to the weight slot in the nodes:
net.graph <- net.s # create copy of original graph
E(net.graph)$weight <- edge.weights(clp, net.graph) # add new weights based on community pertenence
set.seed(28) # set seed for reproducibility
# Let's plot something nicer
#par(bg="black") # set background to black
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.8,
vertex.label.color="black", edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l)
edge.weights <- function(community, network, weight.within = 5, weight.between = 20) {
bridges <- crossing(communities = community, graph = network)
weights <- ifelse(test = bridges, yes = weight.between, no = weight.within)
return(weights)
}
# Then transfer the weights to the weight slot in the nodes:
net.graph <- net.s # create copy of original graph
E(net.graph)$weight <- edge.weights(clp, net.graph) # add new weights based on community pertenence
set.seed(28) # set seed for reproducibility
# Let's plot something nicer
#par(bg="black") # set background to black
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.8,
vertex.label.color="blue", edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l)
edge.weights <- function(community, network, weight.within = 2, weight.between = 20) {
bridges <- crossing(communities = community, graph = network)
weights <- ifelse(test = bridges, yes = weight.between, no = weight.within)
return(weights)
}
# Then transfer the weights to the weight slot in the nodes:
net.graph <- net.s # create copy of original graph
E(net.graph)$weight <- edge.weights(clp, net.graph) # add new weights based on community pertenence
set.seed(28) # set seed for reproducibility
# Let's plot something nicer
#par(bg="black") # set background to black
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.8,
vertex.label.color="blue", edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l)
plot(clp, net.s, vertex.label.cex=0.8, edge.arrow.size=0.1, edge.color="gray85", layout = l)
edge.weights <- function(community, network, weight.within = 2, weight.between = 1) {
bridges <- crossing(communities = community, graph = network)
weights <- ifelse(test = bridges, yes = weight.between, no = weight.within)
return(weights)
}
# Then transfer the weights to the weight slot in the nodes:
net.graph <- net.s # create copy of original graph
E(net.graph)$weight <- edge.weights(clp, net.graph) # add new weights based on community pertenence
set.seed(28) # set seed for reproducibility
# Let's plot something nicer
#par(bg="black") # set background to black
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.8,
vertex.label.color="blue", edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l)
edge.weights <- function(community, network, weight.within = 5, weight.between = 1) {
bridges <- crossing(communities = community, graph = network)
weights <- ifelse(test = bridges, yes = weight.between, no = weight.within)
return(weights)
}
# Then transfer the weights to the weight slot in the nodes:
net.graph <- net.s # create copy of original graph
E(net.graph)$weight <- edge.weights(clp, net.graph) # add new weights based on community pertenence
set.seed(28) # set seed for reproducibility
# Let's plot something nicer
#par(bg="black") # set background to black
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.8,
vertex.label.color="blue", edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l)
edge.weights <- function(community, network, weight.within = 50, weight.between = 1) {
bridges <- crossing(communities = community, graph = network)
weights <- ifelse(test = bridges, yes = weight.between, no = weight.within)
return(weights)
}
# Then transfer the weights to the weight slot in the nodes:
net.graph <- net.s # create copy of original graph
E(net.graph)$weight <- edge.weights(clp, net.graph) # add new weights based on community pertenence
set.seed(28) # set seed for reproducibility
# Let's plot something nicer
#par(bg="black") # set background to black
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.8,
vertex.label.color="blue", edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l)
# Then transfer the weights to the weight slot in the nodes:
net.graph <- net.s # create copy of original graph
E(net.graph)$weight <- edge.weights(clp, net.graph) # add new weights based on community pertenence
set.seed(28) # set seed for reproducibility
# Let's plot something nicer
#par(bg="black") # set background to black
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.8,
vertex.label.color="blue", edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l)
d_raw <- read.csv(file="data/animal_random_merged.csv", header=TRUE, sep=",") # load data
nodes <- data.frame(unique(d_raw$Center)) # create node list of unique labels
nodes <- setNames(nodes, c("Label")) # change colname Label
myvars <- c("Center", "Answer") # vectors to pick
links <- d_raw[myvars] # pick "Center" and "Answer" vectors
links$Type <- rep(c("Directed"), times = length(links$Center)) # add vector "Type" of link
links <- setNames(links, c("From", "To", "Type")) # change col names for graph object
###########################
# Creating a Network Object
###########################
library(igraph)
library(scales)
# we need to pass "link" as edges to "d" and "nodes" as vertices to "Vertices"
# we also set "directed" to true ("T")
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T) # new igraph-network object
E(net) # edges
V(net) # vertices
#####################
# Five-number summary
#####################
########################
# Basic Network plotting
########################
# First raw plot
plot(net)
# Simplified network removing loops and multiple edges between two nodes (if any...)
net.s <- simplify(net, remove.multiple = T, remove.loops = T, edge.attr.comb=c(weight="sum", type="ignore"))
plot(net.s)
# Compute node degrees (#links) and use that to set node size:
deg <- degree(net.s, mode="all")
deg <- rescale(deg, to = c(5, 15)) # resize node size
V(net.s)$size <- deg
plot(net.s, edge.arrow.size=.1) # reduce arrow size
# Let's remove labels from the graph to see how it looks
plot(net.s, edge.arrow.size=.1,vertex.label=NA, layout = layout_with_lgl)
# Really clumpy!
#####################
# Community detection
#####################
# Let's use the walktrap algorithm to find community structure
# This function tries to find densely connected subgraphs, also called communities in a graph
# via random walks. The idea is that short random walks tend to stay in the same community.
clp <- cluster_walktrap(net.s)
# The cluster_walktrap returns a community object
class(clp)
head(clp$membership) #here we can check the community at which each node was assigned
print("number of communities: ")
length(clp) # number of communities
print("Graph's modularity: ")
modularity(clp) # how modular the graph partitioning is
#High modularity for a partitioning reflects dense connections within communities and sparse connections across communities.
# New plot with communities
l = layout.fruchterman.reingold(net.graph) # create a tree like layout
l1 = layout.kamada.kawai(net.graph) # create a tree like layout
plot(clp, net.s, vertex.label.cex=0.8, edge.arrow.size=0.1, edge.color="gray85", layout = l)
l = layout.fruchterman.reingold(net.s) # create a tree like layout
l1 = layout.kamada.kawai(net.s) # create a tree like layout
plot(clp, net.s, vertex.label.cex=0.8, edge.arrow.size=0.1, edge.color="gray85", layout = l)
plot(clp, net.s, vertex.label.cex=0.8, edge.arrow.size=0.1, edge.color="gray85")
plot(clp, net.s, vertex.label.cex=0.8, edge.arrow.size=0.1, edge.color="gray85", layout =  l1)
plot(clp, net.s, vertex.label.cex=0.8, edge.arrow.size=0.1, edge.color="gray85", layout =  l1, asp =0 )
plot(clp, net.s, vertex.label.cex=0.8, vertex.shapes = NULL, edge.arrow.size=0.1, edge.color="gray85", layout =  l1, asp =0 )
plot(clp, net.s, vertex.label.cex=0.8, vertex.shapes = "none", edge.arrow.size=0.1, edge.color="gray85", layout =  l1, asp =0 )
plot(clp, net.s, vertex.label.cex=0.8, vertex.shape = "none", edge.arrow.size=0.1, edge.color="gray85", layout =  l1, asp =0 )
plot(clp, net.s, vertex.label.cex=0.8, edge.arrow.size=0.1, edge.color="gray85", layout =  l1, asp =0 )
edge.weights <- function(community, network, weight.within = 50, weight.between = 1) {
bridges <- crossing(communities = community, graph = network)
weights <- ifelse(test = bridges, yes = weight.between, no = weight.within)
return(weights)
}
# Then transfer the weights to the weight slot in the nodes:
net.graph <- net.s # create copy of original graph
E(net.graph)$weight <- edge.weights(clp, net.graph) # add new weights based on community pertenence
set.seed(28) # set seed for reproducibility
# Let's plot something nicer
#par(bg="black") # set background to black
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.8,
vertex.label.color="blue", edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l, asp =0)
library("RColorBrewer")
prettyColors <- brewer.pal(length(clp), "Spectral") # pick 4 colors (lenght of clp) from spectral pallete
communityColors <- prettyColors[membership(clp)] # assign colors to communities
edge.weights <- function(community, network, weight.within = 50, weight.between = 1) {
bridges <- crossing(communities = community, graph = network)
weights <- ifelse(test = bridges, yes = weight.between, no = weight.within)
return(weights)
}
# Then transfer the weights to the weight slot in the nodes:
net.graph <- net.s # create copy of original graph
E(net.graph)$weight <- edge.weights(clp, net.graph) # add new weights based on community pertenence
set.seed(28) # set seed for reproducibility
# Let's plot something nicer
#par(bg="black") # set background to black
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.8,
vertex.label.color="blue", edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l, asp =0)
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.8,
vertex.label.color="blue", vertex.size = 5, edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l, asp =0)
edge.weights <- function(community, network, weight.within = 100, weight.between = 1) {
bridges <- crossing(communities = community, graph = network)
weights <- ifelse(test = bridges, yes = weight.between, no = weight.within)
return(weights)
}
# Then transfer the weights to the weight slot in the nodes:
net.graph <- net.s # create copy of original graph
E(net.graph)$weight <- edge.weights(clp, net.graph) # add new weights based on community pertenence
set.seed(28) # set seed for reproducibility
# Let's plot something nicer
#par(bg="black") # set background to black
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.8,
vertex.label.color="blue", vertex.size = 5, edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l, asp =0)
set.seed(28) # set seed for reproducibility
tiff("plot_next_animal.tiff", width =5, height = 5, units = 'in', res = 300, compression = 'none')
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.8,
vertex.label.color="blue", vertex.size = 5, edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l, asp =0)
dev.off()
set.seed(28) # set seed for reproducibility
tiff("plot_next_animal.tiff", width =5, height = 5, units = 'in', res = 300, compression = 'none')
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.6,
vertex.label.color="blue", vertex.size = 5, edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l, asp =0)
dev.off()
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.8,
vertex.label.color="blue", vertex.size = 5, edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l1, asp =0)
set.seed(28) # set seed for reproducibility
tiff("plot_next_animal.tiff", width =5, height = 5, units = 'in', res = 300, compression = 'none')
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.6,
vertex.label.color="blue", vertex.size = 5, edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l1, asp =0)
dev.off()
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.5,
vertex.label.color="blue", vertex.size = 6, edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l1, asp =0)
set.seed(28) # set seed for reproducibility
tiff("plot_next_animal.tiff", width =5, height = 5, units = 'in', res = 300, compression = 'none')
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.5,
vertex.label.color="blue", vertex.size = 6, edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l1, asp =0)
dev.off()
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.5,
vertex.label.color="blue", vertex.size = 7, edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l1, asp =0)
# Plot out grapg
set.seed(28) # set seed for reproducibility
tiff("plot_next_animal.tiff", width =5, height = 5, units = 'in', res = 300, compression = 'none')
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.5,
vertex.label.color="blue", vertex.size = 7, edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l1, asp =0)
dev.off()
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.5,
vertex.label.color="blue", vertex.size = 10, edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l1, asp =0)
# Plot out grapg
set.seed(28) # set seed for reproducibility
tiff("plot_next_animal.tiff", width =5, height = 5, units = 'in', res = 300, compression = 'none')
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.5,
vertex.label.color="blue", vertex.size = 10, edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l1, asp =0)
dev.off()
prettyColors <- brewer.pal(length(clp), "Spectral", alpha = 0.8) # pick 4 colors (lenght of clp) from spectral pallete
prettyColors <- rainbow(length(clp), alpha = 0.7)
communityColors <- prettyColors[membership(clp)]
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.5,
vertex.label.color="blue", vertex.size = 10, edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l1, asp =0)
set.seed(28) # set seed for reproducibility
tiff("plot_next_animal.tiff", width =5, height = 5, units = 'in', res = 300, compression = 'none')
plot(x = clp, y = net.graph, edge.width = 0.1,  mark.border=NA, vertex.label.cex=0.5,
vertex.label.color="blue", vertex.size = 10, edge.arrow.size=0.1, edge.color = "Grey",
col = communityColors, layout= l1, asp =0)
dev.off()
